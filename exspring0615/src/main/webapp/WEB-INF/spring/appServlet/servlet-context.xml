<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></beans:property>
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<beans:bean id="tilesConfigurer" 
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	  <beans:property name="definitions">
	    <beans:list>
	      <beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
	    </beans:list>
	  </beans:property>
	</beans:bean>
	
	<context:component-scan base-package="com.exam.myapp" />
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1"></beans:property>
	</beans:bean>
	
	<!-- 핸들러인터셉터 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**" />
			<exclude-mapping path="/student/login.do" />
			<exclude-mapping path="/student/add.do" />
			<beans:bean class="com.exam.myapp.comm.LoginInterceptor" />
		</interceptor>
	</interceptors>
	
	<!-- <context:property-placeholder location="classpath:config/file.properties"/> -->
	<context:property-placeholder location="classpath:config/*.properties"/>
	
	
	<!-- 스프링 애플리케이션에서 공유하여 사용할 수 있는 메시지들을 저장하고 있는 메시지소스 등록 -->
	<!-- 프로퍼티파일에 저장된 메시지를 읽어서 저장하는 메시지소스객체를 messageSource 라는 이름으로 등록 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basename" value="msg"></beans:property>
	</beans:bean>
	
	
	<!-- 데이터베이스 입출력을 위한 객체들을 등록하는 부분 -->
	
	<!-- @Transactional을 이용한 트랜잭션 적용에 필요한 객체들을 자동 등록 -->
	<tx:annotation-driven/>	
	
	<!-- 스프링의 트랜잭션 관리를 담당할 객체 등록 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <beans:property name="dataSource" ref="ds" />
	</beans:bean>
	
  <!-- 데이터베이스 접속 정보 설정 -->
	<beans:bean id="ds" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<beans:property name="username" value="web" />
		<beans:property name="password" value="web01" />
	</beans:bean>
	
  <!-- 마이바티스 설정 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds" />
		
		<!-- 1.3.0 버전부터 XML 설정 파일 대신 직접 지정 가능 -->
		<!-- <beans:property name="configuration">
		<beans:bean class="org.apache.ibatis.session.Configuration">
			<beans:property name="mapUnderscoreToCamelCase" value="true"/>
		</beans:bean>
		</beans:property>
		
		<beans:property name="typeAliasesPackage" value="com.exam.myapp" /> -->
		
		<!--  마이바티스 전체 설정 파일 위치 -->
		<beans:property name="configLocation" value="classpath:batis/mybatis-config.xml" />
 		<!-- 마이바티스가 실행할 SQL문들을 담고 있는 매퍼 XML 파일들을 등록 -->
		<beans:property name="mapperLocations" value="classpath*:batis/mappers/**/*.xml" />
	</beans:bean>
	
	<!-- com.exam.myapp 패키지 하위에 있는 @Mapper가 붙어있는 인터페이스의 구현체를 자동 생성 및 등록 -->
	<mybatis-spring:scan base-package="com.exam.myapp" annotation="org.apache.ibatis.annotations.Mapper"/>
	
	<!-- <beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
  		<beans:constructor-arg index="0" ref="sqlSessionFactory" />
	</beans:bean> -->
	
</beans:beans>
